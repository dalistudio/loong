关于memc模块的编译
2014-10-19

正常情况加入 ngx_http_memc 模块时，通常编译会出错：
error: comparison between signed and unsigned integer expressions
意思是比较两个变量时，变量的类型不一样，可能是有符号和无符号整数的区别。

根据提示意思是要修改 ngx_http_memc_response.rl 的304行第19个字符，也就是如下：
if (u->length == ctx->rest)
改为
if (u->length == (off_t)ctx->rest)
这样编译不过，需要用：
$ ragel -G2 src/ngx_http_memc_response.rl
重新生成 src/ngx_http_memc_response.c

而也可以直接修改src/ngx_http_memc_response.c中相应的位置。

主要问题，出在修改了nginx的版本号，所以造成 memc 模块在使用 
typedef struct {
#if defined(nginx_version) && nginx_version >= 1001004
    off_t                      rest;
#else
    size_t                     rest;
#endif

    ngx_http_request_t        *request;
    ngx_str_t                  key;

    ngx_str_t                  cmd_str;
    ngx_http_memc_cmd_t        cmd;

    ngx_http_variable_value_t  *memc_value_vv;
    ngx_http_variable_value_t  *memc_key_vv;
    ngx_http_variable_value_t  *memc_flags_vv;
    ngx_http_variable_value_t  *memc_exptime_vv;

    ngx_flag_t                 is_storage_cmd;

    int                        parser_state;

    /* just for the subrequests in memory support */
    size_t                     body_length;

} ngx_http_memc_ctx_t;

这个结构的时候，选择了小于 1001004 版本时，使用 size_t rest; 定义，所以造成类型不一样。

------------------------------------------

# copyright (c) 2014, Dali Wang <wangdali@qq.com>
#
# TaoTie Configure File

worker_processes  4; # 使用 CPU 核心数

events {
	worker_connections  2048; # 保持连接数
}


http {
	include       mime.types;
	default_type  application/octet-stream; # 默认类型

	sendfile        on;
	keepalive_timeout  65; # 连接超时
	
	# 配置 SuanNi 服务器集群
	upstream suanni_server {
		server 127.0.0.1:5000;
	}

	#配置 JiaoTu 服务器集群
	upstream jiaotu_server {
		server 127.0.0.1:6000;
	}

	# 配置 PiXiu 服务器集群
	upstream pixiu_server {
		server 127.0.0.1:8000;
	}

	# 配置 BiXi 服务器集群
	upstream bixi_server {
		server 127.0.0.1:9000;
	}

	# 内部网站
	server {
		allow 127.0.0.1; 	# 只允许本机访问
		deny all; 		# 禁止所有IP访问
		listen 127.0.0.1:8080; 	# 监听 端口
		server_name localhost; 	# 本机

		# 网站根目录
		location / {
			root   taotie; 		# 静态页面的根目录
			index  index.html index.htm; 	# 自动索引的页面名称
		}
	}

	# 外部网站
	server {
		listen       80; # 监听 端口
		#server_name  localhost; # 域名

		# 响应错误处理
		error_page   404 /404.html; # 无法找到文件
		error_page   500 /500.html; # 内部服务器错误
		error_page   502 /502.html; # 网关错误
		error_page   503 /503.html; # 服务不可用
		error_page   504 /504.html; # 网关超时

		# 网站根目录
		location / {
			set $key $request_uri;
			srcache_fetch GET /suanni $key;
			srcache_store PUT /suanni $key;
			add_header X-Cached-From $srcache_fetch_status;		# 添加响应头 - 查询缓冲状态
			add_header X-Cached-Store $srcache_store_status;	# 添加响应头 - 写入缓冲状态
			proxy_pass http://127.0.0.1:8080; 			# 跳转到内部网站
		}

		# 静态文件缓冲处理
		location /suanni {
			internal; # 只允许内部请求
			memc_connect_timeout 100ms;	# 连接超时
			memc_send_timeout 100ms; 	# 写超时
			memc_read_timeout 100ms; 	# 读超时

			set $memc_key $query_string;	# Key的名称
			set $memc_exptime 120;		# Key的寿命
			memc_pass suanni_server;
		}

		# 应用服务处理 PiXiu
		# 所有后缀名为 .px 的文件请求
		location ~* \.px$ {
			#echo $request_uri;
			proxy_pass http://pixiu_server;
		}

		# 所有后缀名为 .php 的文件请求
		location ~ \.php$ {
			root           bixi; 	# 动态页面的根目录
			fastcgi_pass   bixi_server;
			fastcgi_index  index.php; 	# 自动索引的页面名称
			fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
			include        fastcgi_params;
		}
	}
}
